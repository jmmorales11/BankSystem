@model Entities.User_Data

@{
    ViewBag.Title = (Model.user_data_id == 0 ? "Crear" : "Actualizar") + " Datos de Usuario";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* Contenedor centrado con fondo gris difuminado */
    .userdata-container {
        max-width: 600px;
        margin: 2rem auto;
        padding: 2rem;
        background-color: rgba(128, 128, 128, 0.3); /* Gris con opacidad */
        backdrop-filter: blur(5px); /* Efecto difuminado */
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .userdata-title {
        text-align: center;
        margin-bottom: 1.5rem;
        color: #333;
        font-size: 1.8rem;
        font-weight: bold;
    }

    .form-group {
        margin-bottom: 1.2rem;
    }

        .form-group label {
            font-weight: 500;
            margin-bottom: 0.5rem;
            display: block;
        }

    .form-control {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 0.6rem;
        width: 100%;
    }

    .btn-primary, .btn-secondary {
        display: block;
        width: 100%;
        margin-top: 1.5rem;
    }
    /* Modal */
    .modal-content {
        border-radius: 8px;
    }

    .modal-header.bg-primary.text-white {
        background-color: #3498db !important;
    }
</style>

<div class="userdata-container">
    <h2 class="userdata-title">@(Model.user_data_id == 0 ? "Crear" : "Actualizar") Datos de Usuario</h2>

    @using (Html.BeginForm("CreateUserData", "UserData", FormMethod.Post, new { id = "userDataForm", @class = "needs-validation", novalidate = "novalidate" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.user_id)
        @Html.HiddenFor(m => m.user_data_id)

        <div class="form-group">
            @Html.LabelFor(m => m.salary, "Salario")
            @Html.TextBoxFor(m => m.salary, new
            {
                @class = "form-control",
                placeholder = "Ingrese su salario",
                type = "number",
                min = "0",
                step = "any"
            })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.family_load, "Carga Familiar")
            @Html.TextBoxFor(m => m.family_load, new
            {
                @class = "form-control",
                placeholder = "Ingrese su carga familiar",
                type = "number",
                min = "0",
                step = "1"
            })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.workplace, "Lugar de Trabajo")
            @Html.TextBoxFor(m => m.workplace, new
            {
                @class = "form-control",
                placeholder = "Ingrese su lugar de trabajo"
            })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.housing_type, "Tipo de Vivienda")
            @Html.TextBoxFor(m => m.housing_type, new
            {
                @class = "form-control",
                placeholder = "Ingrese el tipo de vivienda"
            })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.rent_cost, "Costo de Alquiler")
            @Html.TextBoxFor(m => m.rent_cost, new
            {
                @class = "form-control",
                placeholder = "Ingrese el costo de alquiler",
                type = "number",
                min = "0",
                step = "any"
            })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.years_of_employment, "Años de Empleo")
            @Html.TextBoxFor(m => m.years_of_employment, new
            {
                @class = "form-control",
                placeholder = "Ingrese los años de empleo",
                type = "number",
                min = "0",
                max = "80",
                step = "1"
            })
        </div>

        <div class="form-group">
            @Html.LabelFor(m => m.employment_status, "¿Cuenta con Empleo Fijo?")
            @Html.DropDownListFor(m => m.employment_status, new List<SelectListItem> {
                new SelectListItem { Value = "1", Text = "Si" },
                new SelectListItem { Value = "0", Text = "No" }
            }, new { @class = "form-control" })
        </div>

        <!-- Botón que abre el modal de confirmación -->
        <div class="form-group">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#confirmModal">
                Guardar
            </button>
        </div>
    }
</div>

<!-- Modal de Confirmación -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="confirmModalLabel">Confirmar Guardado</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                ¿Estás seguro de que deseas guardar los datos?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="confirmBtn">Confirmar</button>
            </div>
        </div>
    </div>
</div>

<div class="mt-3">
    @if (ViewBag.IsAdmin != null && (bool)ViewBag.IsAdmin)
    {
        <a href="@Url.Action("ListUserData", "UserData")" class="btn btn-secondary">Volver a Lista de Datos</a>
    }
    else
    {
        <a href="@Url.Action("MyProfile", "User", new { userId = ViewBag.UserId })" class="btn btn-secondary">Volver a Mi Perfil</a>
    }
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // Validación HTML5 con Bootstrap
    (function () {
        'use strict';
        var forms = document.querySelectorAll('.needs-validation');
        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
    })();

    // Al hacer click en "Confirmar" dentro del modal, se envía el formulario
    document.getElementById('confirmBtn').addEventListener('click', function () {
        var form = document.getElementById('userDataForm');
        if (form.checkValidity()) {
            form.submit();
        } else {
            form.classList.add('was-validated');
        }
    });
</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var token = localStorage.getItem("authToken");
        if (!token) {
            window.location.href = "/User/Login";
        }
    });
</script>
