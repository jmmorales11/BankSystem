@model Entities.User

@{
    ViewBag.Title = "Editar Usuario";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- Mensajes de éxito o error -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessage"]
    </div>
}

<style>
    .edit-user-container {
        max-width: 600px;
        margin: 2rem auto;
        padding: 2rem;
        background-color: rgba(128, 128, 128, 0.3);
        backdrop-filter: blur(5px);
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .edit-user-title {
        text-align: center;
        margin-bottom: 1.5rem;
        color: #333;
    }

    .edit-user-form-group {
        margin-bottom: 1.2rem;
    }

    .edit-user-form-control {
        border: 1px solid #ccc;
        border-radius: 4px;
        padding: 0.6rem;
        width: 100%;
    }

    .edit-user-btn {
        display: block;
        width: 100%;
        margin-top: 1.5rem;
    }

    .invalid-feedback {
        color: #dc3545;
        display: none;
        margin-top: 0.5rem;
        font-size: 0.9rem;
    }

    /* Estilos para los mensajes de validación con jQuery */
    .text-danger {
        color: red;
        font-size: 12px;
    }
</style>

<div class="edit-user-container">
    <h2 class="edit-user-title">Editar Usuario</h2>

    @using (Html.BeginForm("EditUser", "User", FormMethod.Post, new { id = "editUserForm", @class = "needs-validation", novalidate = "novalidate" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.user_id)

        @* Si es Admin, mostramos dos columnas *@
        if (ViewBag.IsAdmin != null && (bool)ViewBag.IsAdmin)
        {
            <div class="row">
                <div class="col-md-6">
                    <div class="edit-user-form-group">
                        @Html.LabelFor(m => m.first_name, "Nombre")
                        @Html.TextBoxFor(m => m.first_name, new
                        {
                            @class = "form-control edit-user-form-control",
                            placeholder = "Nombre",
                            required = "required",
                            id = "first_name"
                        })
                        <div class="invalid-feedback">Ingrese el nombre.</div>
                    </div>

                    <div class="edit-user-form-group">
                        @Html.LabelFor(m => m.last_name, "Apellido")
                        @Html.TextBoxFor(m => m.last_name, new
                        {
                            @class = "form-control edit-user-form-control",
                            placeholder = "Apellido",
                            required = "required",
                            id = "last_name"
                        })
                        <div class="invalid-feedback">Ingrese el apellido.</div>
                    </div>

                    <div class="edit-user-form-group">
                        @Html.LabelFor(m => m.address, "Dirección")
                        @Html.TextBoxFor(m => m.address, new
                        {
                            @class = "form-control edit-user-form-control",
                            placeholder = "Dirección",
                            required = "required",
                            id = "address"
                        })
                        <div class="invalid-feedback">Ingrese la dirección.</div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="edit-user-form-group">
                        @Html.LabelFor(m => m.email, "Correo")
                        @Html.TextBoxFor(m => m.email, new
                        {
                            @class = "form-control edit-user-form-control",
                            placeholder = "Correo",
                            type = "email",
                            required = "required",
                            id = "email"
                        })
                        <div class="invalid-feedback">Ingrese un correo válido.</div>
                    </div>

                    <div class="edit-user-form-group">
                        @Html.LabelFor(m => m.role, "Rol")
                        @Html.DropDownListFor(m => m.role,
                            new List<SelectListItem>
                            {
                                new SelectListItem { Text = "Admin", Value = "Admin" },
                                new SelectListItem { Text = "User", Value = "User" }
                            },
                            new { @class = "form-control edit-user-form-control", required = "required", id = "role" })
                        <div class="invalid-feedback">Seleccione el rol.</div>
                    </div>

                    <div class="edit-user-form-group">
                        @Html.LabelFor(m => m.status, "Estado")
                        @Html.DropDownListFor(m => m.status,
                            new List<SelectListItem>
                            {
                                new SelectListItem { Text = "Activo", Value = "Activo" },
                                new SelectListItem { Text = "Inactivo", Value = "Inactivo" }
                            },
                            new { @class = "form-control edit-user-form-control", required = "required", id = "status" })
                        <div class="invalid-feedback">Seleccione un estado.</div>
                    </div>
                </div>
            </div>
        }
        else
        {
            @* Para usuarios que no son Admin, mostramos una sola columna y ocultamos los campos exclusivos *@
            <div class="row">
                <div class="col-md-12">
                    <div class="edit-user-form-group">
                        @Html.LabelFor(m => m.first_name, "Nombre")
                        @Html.TextBoxFor(m => m.first_name, new
                        {
                            @class = "form-control edit-user-form-control",
                            placeholder = "Nombre",
                            required = "required",
                            id = "first_name"
                        })
                        <div class="invalid-feedback">Ingrese el nombre.</div>
                    </div>

                    <div class="edit-user-form-group">
                        @Html.LabelFor(m => m.last_name, "Apellido")
                        @Html.TextBoxFor(m => m.last_name, new
                        {
                            @class = "form-control edit-user-form-control",
                            placeholder = "Apellido",
                            required = "required",
                            id = "last_name"
                        })
                        <div class="invalid-feedback">Ingrese el apellido.</div>
                    </div>

                    <div class="edit-user-form-group">
                        @Html.LabelFor(m => m.address, "Dirección")
                        @Html.TextBoxFor(m => m.address, new
                        {
                            @class = "form-control edit-user-form-control",
                            placeholder = "Dirección",
                            required = "required",
                            id = "address"
                        })
                        <div class="invalid-feedback">Ingrese la dirección.</div>
                    </div>

                    @* Se mantienen los valores del email, rol y estado sin mostrarlos *@
                    @Html.HiddenFor(m => m.email)
                    @Html.HiddenFor(m => m.role)
                    @Html.HiddenFor(m => m.status)
                </div>
            </div>
        }

        <!-- Botón para abrir el modal de confirmación -->
        <button type="button" class="btn btn-primary edit-user-btn" data-bs-toggle="modal" data-bs-target="#confirmUpdateModal">
            Actualizar Usuario
        </button>
    }

</div>

<!-- Modal de Confirmación de Actualización -->
<div class="modal fade" id="confirmUpdateModal" tabindex="-1" aria-labelledby="confirmUpdateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="confirmUpdateModalLabel">Confirmar Actualización</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <p>¿Estás seguro de que deseas actualizar los datos de este usuario?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="confirmUpdateBtn">Actualizar</button>
            </div>
        </div>
    </div>
</div>

<!-- Botón de Cancelar (navegación según rol) -->
<div class="text-center mt-3">
    @if (ViewBag.IsAdmin != null && (bool)ViewBag.IsAdmin)
    {
        <a href="@Url.Action("GetAllUsers", "User")" class="btn btn-outline-secondary">Volver a Lista de Usuarios</a>
    }
    else
    {
        <a href="@Url.Action("MyProfile", "User")" class="btn btn-outline-secondary">Volver a Mi Perfil</a>
    }
</div>

<!-- Se incluyen jQuery y jQuery Validate -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
<script>
    // Método para escapar HTML en los campos de entrada
    function escapeHTML(str) {
        return str.replace(/[&<>"']/g, function (char) {
            return {
                '&': '&amp;',
                '<': '&lt;',
                '>': '&gt;',
                '"': '&quot;',
                "'": '&#039;'
            }[char];
        });
    }

    // Función para validar y enviar el formulario con escape de HTML
    function handleSubmit(event) {
        event.preventDefault();
        const fields = ['first_name', 'last_name', 'email', 'address', 'role'];
        fields.forEach(field => {
            const input = document.getElementById(field);
            if (input) {
                input.value = escapeHTML(input.value);
            }
        });
        if ($("#editUserForm").valid()) {
            $("#editUserForm").submit();
        }
    }

    // Agregar método para validar solo letras
    $.validator.addMethod("lettersonly", function (value, element) {
        return this.optional(element) || /^[a-zA-ZáéíóúÁÉÍÓÚñÑ\s]+$/.test(value);
    }, "Solo se permiten letras.");

    $(document).ready(function () {
        // Reglas de validación para el formulario
        $("#editUserForm").validate({
            rules: {
                first_name: {
                    required: true,
                    maxlength: 50,
                    lettersonly: true
                },
                last_name: {
                    required: true,
                    maxlength: 50,
                    lettersonly: true
                },
                email: {
                    required: true,
                    email: true
                },
                address: {
                    required: true,
                    maxlength: 100
                },
                role: {
                    required: true
                },
                status: {
                    required: true
                }
            },
            messages: {
                first_name: {
                    required: "Por favor, ingrese su nombre",
                    maxlength: "El nombre no debe exceder los 50 caracteres",
                    lettersonly: "El nombre solo puede contener letras."
                },
                last_name: {
                    required: "Por favor, ingrese su apellido",
                    maxlength: "El apellido no debe exceder los 50 caracteres",
                    lettersonly: "El apellido solo puede contener letras."
                },
                email: {
                    required: "Por favor, ingrese su correo",
                    email: "Ingrese un correo válido"
                },
                address: {
                    required: "Ingrese su dirección",
                    maxlength: "La dirección no debe exceder los 100 caracteres"
                },
                role: {
                    required: "Seleccione un rol"
                },
                status: {
                    required: "Seleccione un estado"
                }
            },
            errorClass: "text-danger",
            errorElement: "div"
        });

        // Enviar el formulario al confirmar la actualización
        $("#confirmUpdateBtn").click(function () {
            if ($("#editUserForm").valid()) {
                handleSubmit(event);
            } else {
                $("#editUserForm").addClass("was-validated");
            }
        });
    });
</script>

<!-- Script de Bootstrap -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var token = localStorage.getItem("authToken");
        if (!token) {
            window.location.href = "/User/Login";
        }
    });
</script>